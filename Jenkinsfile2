pipeline {
    agent any

    environment {
        NEXUS_USER = credentials('nexus-username')
        NEXUS_PASSWORD = credentials('nexus-password')
        NVD_API_KEY = credentials('nvd-key')
        NEXUS_REPO_URL = 'nexus.bolatitoadegoroye.top'
        MAVEN_REPO = 'nexus-repo'
        DOCKER_REPO = 'docker-repo'
    }

    stages {
        stage('Code Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Artifacts') {
            steps {
                sh 'mvn clean install -DskipTests -Dcheckstyle.skip'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${NEXUS_REPO_URL}:8085/${DOCKER_REPO}/petclinicapps ."
            }
        }

        stage('Push Artifact to Nexus') {
            steps {
                nexusArtifactUploader artifacts: [[
                    artifactId: 'spring-petclinic',
                    classifier: '',
                    file: 'target/spring-petclinic-2.4.2.war',
                    type: 'war'
                ]],
                credentialsId: 'nexus-cred',
                groupId: 'Petclinic',
                nexusUrl: "${NEXUS_REPO_URL}",
                nexusVersion: 'nexus3',
                protocol: 'https',
                repository: "${MAVEN_REPO}",
                version: '1.0'
            }
        }

        stage('Trivy File Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Docker Login to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-cred', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh "echo \$PASS | docker login ${NEXUS_REPO_URL}:8085 -u \$USER --password-stdin"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${NEXUS_REPO_URL}:8085/${DOCKER_REPO}/petclinicapps"
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh "trivy image ${NEXUS_REPO_URL}:8085/${DOCKER_REPO}/petclinicapps > trivy.txt"
            }
        }

        stage('Deploy to Stage') {
            steps {
                sshagent(['ansible-key']) {
                    sh 'ssh -t -t ec2-user@10.0.3.24 -o StrictHostKeyChecking=no "ansible-playbook -i /etc/ansible/stage-hosts /etc/ansible/stage-playbook.yml"'
                }
            }
        }

        stage('Check Stage Website') {
            steps {
                sleep 90
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" https://stage.bolatitoadegoroye.top", returnStdout: true).trim()
                    if (response == "200") {
                        slackSend(color: 'good', message: "Stage site is up (HTTP ${response})", tokenCredentialId: 'slack')
                    } else {
                        slackSend(color: 'danger', message: "Stage site might be down (HTTP ${response})", tokenCredentialId: 'slack')
                    }
                }
            }
        }

        stage('Request Approval') {
            steps {
                timeout(activity: true, time: 10) {
                    input message: 'Deploy to production?', submitter: 'admin'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                sshagent(['ansible-key']) {
                    sh 'ssh -t -t ec2-user@10.0.3.24 -o StrictHostKeyChecking=no "ansible-playbook -i /etc/ansible/prod-hosts /etc/ansible/prod-playbook.yml"'
                }
            }
        }

        stage('Check Prod Website') {
            steps {
                sleep 90
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" https://prod.bolatitoadegoroye.top", returnStdout: true).trim()
                    if (response == "200") {
                        slackSend(color: 'good', message: "Prod site is up (HTTP ${response})", tokenCredentialId: 'slack')
                    } else {
                        slackSend(color: 'danger', message: "Prod site might be down (HTTP ${response})", tokenCredentialId: 'slack')
                    }
                }
            }
        }
    }
}
