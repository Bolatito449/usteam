pipeline {
    agent any
    environment {
        NEXUS_USER = credentials('nexus-username')
        NEXUS_PASSWORD = credentials('nexus-password')
        NEXUS_REPO = credentials('nexus-repo')
        NVD_API_KEY = credentials('nvd-key')
        ANSIBLE_IP = credentials('ansible-ip')
        BASTION_IP = credentials('bastion-ip')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    stages {
        stage('Code analysis stage') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Dependency check') {
            steps {
                withCredentials([string(credentialsId: 'nvd-key', variable: 'NVD_API_KEY')]) {
                    dependencyCheck additionalArguments: "--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey $NVD_API_KEY",
                        odcInstallation: 'DP-Check'
                }
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Build artefacts') {
            steps {
                sh 'mvn clean package -DskipTests -Dcheckstyle.skip'
            }
        }

        stage('Push artifacts to nexus-repo') {
            steps {
                nexusArtifactUploader(
                    artifacts: [[
                        artifactId: 'spring-petclinic',
                        classifier: '',
                        file: 'target/spring-petclinic-2.4.2.war',
                        type: 'war'
                    ]],
                    credentialsId: 'nexus-cred',
                    groupId: 'Petclinic',
                    nexusUrl: 'nexus.bolatitoadegoroye.top',
                    nexusVersion: 'nexus3',
                    protocol: 'https',
                    repository: 'nexus-repo',
                    version: '1.0'
                )
            }
        }

        stage('Build Docker image') {
            steps {
                sh 'docker build -t $NEXUS_REPO/petclinicapps .'
            }
        }

        stage('Login to Nexus repo') {
            steps {
                sh 'docker login --username $NEXUS_USER --password $NEXUS_PASSWORD $NEXUS_REPO'
            }
        }

        stage('Push image to Nexus repo') {
            steps {
                sh 'docker push $NEXUS_REPO/petclinicapps'
            }
        }

        stage('Trivy image scan') {
            steps {
                sh "trivy image --exit-code 0 --severity HIGH,CRITICAL --ignore-unfixed $NEXUS_REPO/petclinicapps > trivy.txt"
                archiveArtifacts artifacts: 'trivy.txt', fingerprint: true
            }
        }

        stage('Deploy to stage') {
            steps {
                sshagent(['ansible-key']) {
                    script {
                        try {
                            sh '''
                                ssh -t -t -o StrictHostKeyChecking=no \
                                -o ProxyCommand="ssh -W %h:%p -o StrictHostKeyChecking=no ec2-user@${BASTION_IP}" \
                                ec2-user@${ANSIBLE_IP} \
                                "ansible-playbook -i /etc/ansible/stage_hosts /etc/ansible/deployment.yml"
                            '''
                        } catch (Exception e) {
                            slackSend(
                                color: 'danger',
                                message: "STAGE DEPLOY FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nError: ${e.getMessage()}",
                                tokenCredentialId: 'slack'
                            )
                            error("Stage deployment failed: ${e.getMessage()}")
                        }
                    }
                }
            }
        }

        stage('Check stage website availability') {
            steps {
                script {
                    try {
                        sh "sleep 90"
                        def response = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' https://stage.bolatitoadegoroye.top",
                            returnStdout: true
                        ).trim()

                        if (response != "200") {
                            error("Stage site returned HTTP ${response}")
                        }

                        slackSend(
                            color: 'good',
                            message: "STAGE SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                                     "Status: HTTP ${response}\n" +
                                     "URL: https://stage.bolatitoadegoroye.top",
                            tokenCredentialId: 'slack'
                        )
                    } catch (Exception e) {
                        slackSend(
                            color: 'danger',
                            message: "STAGE VERIFICATION FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                                     "Error: ${e.getMessage()}",
                            tokenCredentialId: 'slack'
                        )
                        error(e.getMessage())
                    }
                }
            }
        }

        stage('Request for Approval') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    input(
                        message: 'Approve Production Deployment?',
                        submitter: 'admin',
                        parameters: [
                            choice(
                                choices: ['Approve', 'Reject'],
                                description: 'Select deployment action',
                                name: 'DEPLOY_ACTION'
                            )
                        ]
                    )
                }
            }
        }

        stage('Deploy to prod') {
            when {
                expression { params.DEPLOY_ACTION == 'Approve' }
            }
            steps {
                sshagent(['ansible-key']) {
                    script {
                        try {
                            sh '''
                                ssh -t -t -o StrictHostKeyChecking=no \
                                -o ProxyCommand="ssh -W %h:%p -o StrictHostKeyChecking=no ec2-user@${BASTION_IP}" \
                                ec2-user@${ANSIBLE_IP} \
                                "ansible-playbook -i /etc/ansible/prod_hosts /etc/ansible/deployment.yml"
                            '''
                        } catch (Exception e) {
                            slackSend(
                                color: 'danger',
                                message: "PROD DEPLOY FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nError: ${e.getMessage()}",
                                tokenCredentialId: 'slack'
                            )
                            error("Production deployment failed: ${e.getMessage()}")
                        }
                    }
                }
            }
        }

        stage('Check prod website availability') {
            when {
                expression { params.DEPLOY_ACTION == 'Approve' }
            }
            steps {
                script {
                    try {
                        sh "sleep 90"
                        def response = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' https://prod.bolatitoadegoroye.top",
                            returnStdout: true
                        ).trim()

                        if (response != "200") {
                            error("Production site returned HTTP ${response}")
                        }

                        currentBuild.result = 'SUCCESS'
                        slackSend(
                            color: 'good',
                            message: "PRODUCTION SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                                     "Status: HTTP ${response}\n" +
                                     "URL: https://prod.bolatitoadegoroye.top",
                            tokenCredentialId: 'slack'
                        )
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        slackSend(
                            color: 'danger',
                            message: "PROD VERIFICATION FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                                     "Error: ${e.getMessage()}",
                            tokenCredentialId: 'slack'
                        )
                        error(e.getMessage())
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                def status = currentBuild.currentResult

                slackSend(
                    color: status == 'SUCCESS' ? 'good' : 'danger',
                    message: "PIPELINE COMPLETE: ${status}\n" +
                             "Job: ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                             "Duration: ${duration}\n" +
                             "Stage: https://stage.bolatitoadegoroye.top\n" +
                             "Prod: https://prod.bolatitoadegoroye.top",
                    tokenCredentialId: 'slack'
                )
            }
        }

        cleanup {
            cleanWs()
            sshagent(['ansible-key']) {
                sh 'ssh-add -D || true'
            }
        }
    }
}
